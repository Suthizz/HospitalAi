# ----------------------------------------------------------
# üè• Hospital AI Decision Support System (Refactored)
# ----------------------------------------------------------
import os
import json
import joblib
import numpy as np
import pandas as pd
import streamlit as st
from catboost import CatBoostClassifier
import matplotlib.pyplot as plt
import seaborn as sns

# ----------------------------------------------------------
# ‚öôÔ∏è Page Setup
# ----------------------------------------------------------
st.set_page_config(page_title="Hospital AI Decision Support", page_icon="üè•", layout="wide")
st.title("Hospital AI for Clinical Decision Support")
st.caption("‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•")

# ----------------------------------------------------------
# üì¶ Load Models and Cached Resources
# ----------------------------------------------------------
@st.cache_resource
def load_all_models():
    """Loads all models and necessary files, caching them for performance."""
    resources = {}
    msgs = []

    try:
        resources["model"] = joblib.load("predict_catboost_multi.pkl")
        msgs.append("‚úÖ predict_catboost_multi.pkl ‚Äî Clinical Severity Model")
    except FileNotFoundError:
        resources["model"] = None
        msgs.append("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö predict_catboost_multi.pkl")

    try:
        resources["encoders"] = joblib.load("encoders_multi.pkl")
        msgs.append("‚úÖ encoders_multi.pkl ‚Äî Encoders for Clinical Data")
    except FileNotFoundError:
        resources["encoders"] = None
        msgs.append("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö encoders_multi.pkl")

    try:
        with open("features_multi.json", "r") as f:
            resources["features"] = json.load(f)
        msgs.append("‚úÖ features_multi.json ‚Äî Model Features Configuration")
    except FileNotFoundError:
        resources["features"] = []
        msgs.append("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö features_multi.json")

    try:
        resources["kmeans"] = joblib.load("kmeans_cluster_model.pkl")
        resources["scaler"] = joblib.load("scaler_cluster.pkl")
        msgs.append("‚úÖ kmeans_cluster_model.pkl / scaler_cluster.pkl ‚Äî Clustering Models")
    except FileNotFoundError:
        resources["kmeans"] = resources["scaler"] = None
        msgs.append("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå K-Means / Scaler")

    try:
        resources["rules_minor"] = joblib.load("apriori_rules_minor.pkl")
        resources["rules_severe"] = joblib.load("apriori_rules_severe.pkl")
        resources["rules_fatal"] = joblib.load("apriori_rules_fatal.pkl")
        msgs.append("‚úÖ apriori_rules_[minor/severe/fatal].pkl ‚Äî Risk Pattern Mining Rules")
    except FileNotFoundError:
        resources["rules_minor"] = resources["rules_severe"] = resources["rules_fatal"] = None
        msgs.append("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏é Apriori")

    with st.expander("üìÇ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•", expanded=False):
        for m in msgs:
            st.caption(m)
    return resources

# Load all resources
resources = load_all_models()

# ----------------------------------------------------------
# üß© Manual Mappings and Constants
# ----------------------------------------------------------
# (Mappings remain unchanged)
activity_mapping = {"0": "‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏ó‡πâ‡∏≤", "1": "‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞", "2": "‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•", "3": "‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•", "4": "‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", "5": "‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏µ‡∏¨‡∏≤", "6": "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"}
aplace_mapping = {"10": "‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡∏±‡∏Å‡∏≠‡∏≤‡∏®‡∏±‡∏¢", "11": "‡∏ñ‡∏ô‡∏ô/‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏ß‡∏á", "12": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", "13": "‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô/‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤", "14": "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞", "15": "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"}
prov_mapping = {"10": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£", "20": "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", "30": "‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô", "40": "‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï", "50": "‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤", "60": "‡∏™‡∏á‡∏Ç‡∏•‡∏≤", "99": "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"}
severity_map = {0: "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ô‡πâ‡∏≠‡∏¢", 1: "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", 2: "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏°‡∏≤‡∏Å"}
advice_map = {"‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ô‡πâ‡∏≠‡∏¢": "‡∏î‡∏π‡πÅ‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏ã‡πâ‡∏≥‡∏ó‡∏∏‡∏Å 15‚Äì30 ‡∏ô‡∏≤‡∏ó‡∏µ", "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á": "‡∏™‡πà‡∏á‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏£‡∏ô‡πâ‡∏≥ / ‡∏¢‡∏≤‡πÅ‡∏Å‡πâ‡∏õ‡∏ß‡∏î / ‡πÄ‡∏ù‡πâ‡∏≤‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ä‡∏µ‡∏û‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î", "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏°‡∏≤‡∏Å": "‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏µ‡∏°‡∏™‡∏´‡∏™‡∏≤‡∏Ç‡∏≤ ‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏≤‡∏¢‡πÉ‡∏à ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏î‡πà‡∏ß‡∏ô"}
triage_color = {"‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ô‡πâ‡∏≠‡∏¢": "#4CAF50", "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á": "#FFC107", "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏°‡∏≤‡∏Å": "#F44336"}


# ----------------------------------------------------------
# üìù Helper Function for Preprocessing
# ----------------------------------------------------------
def preprocess_input(data_dict, encoders, features):
    df = pd.DataFrame([data_dict])
    # Reverse map string values back to keys for processing
    reverse_activity = {v: k for k, v in activity_mapping.items()}
    reverse_aplace = {v: k for k, v in aplace_mapping.items()}
    reverse_prov = {v: k for k, v in prov_mapping.items()}
    df["activity"] = df["activity"].map(reverse_activity)
    df["aplace"] = df["aplace"].map(reverse_aplace)
    df["prov"] = df["prov"].map(reverse_prov)
    
    # Apply encoders
    for col in ["activity", "aplace", "prov"]:
        val = str(df.at[0, col])
        if encoders and col in encoders:
            le = encoders[col]
            if val in le.classes_:
                df[col] = le.transform([val])[0]
            else:
                df[col] = -1 # Handle unknown category
        else:
            df[col] = -1

    # Feature Engineering
    df["age_group_60plus"] = (df["age"] >= 60).astype(int)
    df["risk_count"] = df[["risk1","risk2","risk3","risk4","risk5"]].sum(axis=1)
    df["night_flag"] = df["is_night"].astype(int)
    
    # Ensure all required features are present
    df = df.reindex(columns=features, fill_value=0)
    return df

# ==========================================================
# ü©∫ TAB 1: Clinical Risk Prediction
# ==========================================================
def render_tab1():
    st.subheader("üß† Clinical Severity Prediction")
    st.caption("‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå")

    with st.form("input_form"):
        st.subheader("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö")
        # --- Input Fields (same as before) ---
        age = st.number_input("‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏õ‡∏µ)", min_value=0, max_value=120, value=35)
        sex = st.radio("‡πÄ‡∏û‡∏®", ["‡∏´‡∏ç‡∏¥‡∏á", "‡∏ä‡∏≤‡∏¢"], horizontal=True)
        is_night = st.checkbox("‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô", value=False)
        head_injury = st.checkbox("‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏®‡∏µ‡∏£‡∏©‡∏∞", value=False)
        mass_casualty = st.checkbox("‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å", value=False)
        st.markdown("**‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á (Risk Factors)**")
        c1, c2, c3, c4, c5 = st.columns(5)
        with c1: risk1 = st.checkbox("‡πÑ‡∏°‡πà‡∏™‡∏ß‡∏°‡∏´‡∏°‡∏ß‡∏Å‡∏ô‡∏¥‡∏£‡∏†‡∏±‡∏¢ / ‡πÄ‡∏Ç‡πá‡∏°‡∏Ç‡∏±‡∏î‡∏ô‡∏¥‡∏£‡∏†‡∏±‡∏¢")
        with c2: risk2 = st.checkbox("‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ‡πÄ‡∏£‡πá‡∏ß / ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ó")
        with c3: risk3 = st.checkbox("‡πÄ‡∏°‡∏≤ / ‡∏î‡∏∑‡πà‡∏°‡∏™‡∏∏‡∏£‡∏≤")
        with c4: risk4 = st.checkbox("‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ / ‡πÄ‡∏î‡πá‡∏Å‡πÄ‡∏•‡πá‡∏Å")
        with c5: risk5 = st.checkbox("‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á")
        st.markdown("**‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î/‡∏¢‡∏≤‡πÉ‡∏ô‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢**")
        d1, d2, d3 = st.columns(3)
        with d1: cannabis = st.checkbox("‡∏Å‡∏±‡∏ç‡∏ä‡∏≤")
        with d2: amphetamine = st.checkbox("‡∏¢‡∏≤‡∏ö‡πâ‡∏≤ / ‡πÅ‡∏≠‡∏°‡πÄ‡∏ü‡∏ï‡∏≤‡∏°‡∏µ‡∏ô")
        with d3: drugs = st.checkbox("‡∏¢‡∏≤‡∏≠‡∏∑‡πà‡∏ô ‡πÜ")
        st.markdown("**‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå**")
        activity = st.selectbox("‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏ì‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏", list(activity_mapping.values()))
        aplace = st.selectbox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏", list(aplace_mapping.values()))
        prov = st.selectbox("‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏", list(prov_mapping.values()))
        
        submit = st.form_submit_button("üîé ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á")

    if submit:
        input_data = {
            "age": age, "sex": 1 if sex == "‡∏ä‡∏≤‡∏¢" else 0,
            "is_night": int(is_night), "head_injury": int(head_injury), "mass_casualty": int(mass_casualty),
            "risk1": int(risk1), "risk2": int(risk2), "risk3": int(risk3), "risk4": int(risk4), "risk5": int(risk5),
            "cannabis": int(cannabis), "amphetamine": int(amphetamine), "drugs": int(drugs),
            "activity": activity, "aplace": aplace, "prov": prov
        }
        
        model = resources.get("model")
        if model:
            X_input = preprocess_input(input_data, resources.get("encoders"), resources.get("features"))
            probs = model.predict_proba(X_input)[0]
            pred_class = int(np.argmax(probs))
            label = severity_map.get(pred_class, "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö")
            
            # Save result to session state to share with other tabs
            st.session_state['prediction_result'] = {
                'label': label, 'color': triage_color.get(label),
                'advice': advice_map.get(label), 'confidence': probs[pred_class],
                'input_data': input_data, 'X_input': X_input
            }

            # Log prediction to file
            log_file = "prediction_log.csv"
            new_row = pd.DataFrame([{"timestamp": pd.Timestamp.now(), "age": age, "sex": sex, "predicted_severity": label}])
            new_row.to_csv(log_file, mode="a", index=False, header=not os.path.exists(log_file))
            st.success("üìÅ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Dashboard ‡πÅ‡∏•‡πâ‡∏ß")
        else:
            st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå")

    # Display result if available in session state
    if 'prediction_result' in st.session_state:
        res = st.session_state['prediction_result']
        st.markdown(f"<div style='background-color:{res['color']};padding:12px;border-radius:10px;'><h3 style='color:white;text-align:center;'>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: {res['label']}</h3></div>", unsafe_allow_html=True)
        st.info(f"üí° ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô: {res['advice']}")
        st.caption(f"üß† ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö: {res['confidence']*100:.1f}%")

# ==========================================================
# üë• TAB 2: Cluster Insight
# ==========================================================
def render_tab2():
    st.subheader("üë• Patient Segmentation")
    st.caption("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏£‡∏∏‡∏Å")

    if 'prediction_result' not in st.session_state:
        st.info("üïê ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÅ‡∏£‡∏Å‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà")
        return

    res = st.session_state['prediction_result']
    data = res['input_data']

    # --- Display patient summary ---
    st.markdown("### üßæ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö")
    summary_cols = st.columns(3)
    summary_cols[0].metric("‡∏≠‡∏≤‡∏¢‡∏∏", f"{data['age']} ‡∏õ‡∏µ")
    summary_cols[1].metric("‡πÄ‡∏û‡∏®", "‡∏ä‡∏≤‡∏¢" if data['sex'] == 1 else "‡∏´‡∏ç‡∏¥‡∏á")
    summary_cols[2].metric("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå", res['label'])

    # --- Clustering analysis ---
    kmeans, scaler = resources.get("kmeans"), resources.get("scaler")
    if kmeans and scaler:
        X_cluster = res['X_input']
        if hasattr(scaler, "feature_names_in_"):
            valid_cols = [c for c in scaler.feature_names_in_ if c in X_cluster.columns]
            X_cluster = X_cluster[valid_cols]
        
        X_scaled = scaler.transform(X_cluster)
        cluster_label = int(kmeans.predict(X_scaled)[0])

        cluster_desc = {
            0: "üëµ ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ / ‡∏•‡∏∑‡πà‡∏ô‡∏•‡πâ‡∏°‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô ‚Üí ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥",
            1: "üöó ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏¢‡∏ó‡∏≥‡∏á‡∏≤‡∏ô / ‡πÄ‡∏°‡∏≤ / ‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ‡πÄ‡∏£‡πá‡∏ß ‚Üí ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á",
            2: "‚öΩ ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏î‡πá‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏¢‡∏£‡∏∏‡πà‡∏ô / ‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏µ‡∏¨‡∏≤ ‚Üí ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á",
            3: "üë∑ ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô / ‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á ‚Üí ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á",
            4: "üôÇ ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ / ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏î‡πà‡∏ô ‚Üí ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥"
        }
        st.markdown("---")
        st.markdown(f"### üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö: **Cluster {cluster_label}**")
        st.info(f"{cluster_desc.get(cluster_label, '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ')}")
    else:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏• K-Means / Scaler")

# ==========================================================
# üß© TAB 3: Risk Association
# ==========================================================
def render_tab3():
    st.subheader("üß© Risk Association Analysis")
    st.caption("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏ä‡∏¥‡∏á‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢")
    
    if 'prediction_result' not in st.session_state:
        st.info("üïê ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÅ‡∏£‡∏Å‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏é‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á")
        return

    res = st.session_state['prediction_result']
    label = res['label']
    
    rules_map = {"‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ô‡πâ‡∏≠‡∏¢": resources.get("rules_minor"), "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á": resources.get("rules_severe"), "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏°‡∏≤‡∏Å": resources.get("rules_fatal")}
    df_rules = rules_map.get(label)

    if df_rules is not None and not df_rules.empty:
        st.markdown(f"### üîó ‡∏Å‡∏é‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏° '{label}'")
        # Display top 5 rules
        st.dataframe(df_rules.head(5), use_container_width=True)
    else:
        st.info(f"üì≠ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏é‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏° '{label}'")

# ==========================================================
# üìä TAB 4: Clinical Summary Dashboard
# ==========================================================
def render_tab4():
    st.subheader("üìä Clinical Summary & Insights Dashboard")
    st.caption("‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•")

    log_file = "prediction_log.csv"
    
    if st.button("üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Dashboard ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
        if os.path.exists(log_file):
            os.remove(log_file)
            st.success("‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
            # Use st.experimental_rerun() to refresh the page immediately after deleting the file
            st.experimental_rerun() 
        else:
            st.info("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏•‡∏ö")

    if not os.path.exists(log_file):
        st.warning("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Dashboard")
        return

    df_log = pd.read_csv(log_file)
    total_cases = len(df_log)
    
    if total_cases > 0:
        st.markdown("### üí° ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå (KPI Overview)")
        c1, c2, c3 = st.columns(3)
        severe_ratio = df_log["predicted_severity"].eq("‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏°‡∏≤‡∏Å").mean() * 100
        male_ratio = (df_log["sex"] == "‡∏ä‡∏≤‡∏¢").mean() * 100
        
        c1.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"{total_cases:,}")
        c2.metric("‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á (‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏°‡∏≤‡∏Å)", f"{severe_ratio:.1f}%")
        c3.metric("‡πÄ‡∏û‡∏®‡∏ä‡∏≤‡∏¢ : ‡∏´‡∏ç‡∏¥‡∏á", f"{male_ratio:.1f}% : {100-male_ratio:.1f}%")
        
        st.markdown("### ü©∏ ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á")
        fig, ax = plt.subplots(figsize=(5, 4))
        severity_counts = df_log['predicted_severity'].value_counts()
        pie_colors = [triage_color.get(label, '#808080') for label in severity_counts.index]
        
        severity_counts.plot.pie(autopct='%1.1f%%', startangle=90, colors=pie_colors, ax=ax, textprops={'color': 'white', 'fontsize': 10})
        ax.set_ylabel('')
        ax.set_title("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á", color='white', fontsize=12)
        st.pyplot(fig)
        plt.close(fig) # Prevent figure from being re-rendered
    else:
        st.info("‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")

# ==========================================================
# üñ•Ô∏è Main App Interface
# ==========================================================
tab1, tab2, tab3, tab4 = st.tabs([
    "üß† Clinical Risk Prediction",
    "üë• Cluster Insight",
    "üß© Risk Association",
    "üìä Clinical Summary Dashboard"
])

with tab1:
    render_tab1()

with tab2:
    render_tab2()

with tab3:
    render_tab3()

with tab4:
    render_tab4()

