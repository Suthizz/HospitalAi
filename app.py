import streamlit as st
import os
import json
import joblib
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ matplotlib ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
plt.style.use('dark_background')
plt.rcParams['figure.figsize'] = (6, 4)

# Configure matplotlib to support Thai font
plt.rcParams['font.family'] = 'DejaVu Sans'  # Use a font that supports Thai characters
plt.rcParams['axes.unicode_minus'] = False  # Allow minus sign to be displayed correctly

# ----------------------------------------------------------
# üì¶ Load Models + Configs
# ----------------------------------------------------------

@st.cache_resource
def load_all():
    st.write("‚è≥ Attempting to Load Models and Configurations...")

    # üîπ CatBoost Model
    try:
        # Assume the model file is available in the deployment environment
        model = joblib.load("predict_catboost_multi.pkl")
        st.success("‚úÖ Clinical Severity Model (predict_catboost_multi.pkl) Loaded.")
    except Exception as e:
        model = None
        st.error(f"‚ùå Clinical Severity Model (predict_catboost_multi.pkl) NOT FOUND. (Error: {e}) -> Prediction will not work.")

    # üîπ Encoders / Features / K-Means / Apriori
    try:
        encoders = joblib.load("encoders_multi.pkl")
        st.success("‚úÖ Encoders (encoders_multi.pkl) Loaded.")
    except:
        encoders = None
        st.warning("‚ö†Ô∏è Encoders (encoders_multi.pkl) NOT FOUND. Some preprocessing steps might be skipped.")


    try:
        with open("features_multi.json", "r") as f: features = json.load(f)
        st.success("‚úÖ Features List (features_multi.json) Loaded.")
    except:
        features = ['age', 'sex', 'is_night', 'head_injury', 'mass_casualty', 'risk1', 'risk2', 'risk3', 'risk4', 'risk5', 'cannabis', 'amphetamine', 'drugs', 'activity', 'aplace', 'prov']
        st.warning(f"‚ö†Ô∏è Features List (features_multi.json) NOT FOUND. Using default list: {features}")


    try:
        kmeans = joblib.load("kmeans_cluster_model.pkl")
        scaler = joblib.load("scaler_cluster.pkl")
        st.success("‚úÖ K-Means Cluster Model (kmeans_cluster_model.pkl) and Scaler (scaler_cluster.pkl) Loaded.")
    except:
        kmeans, scaler = None, None
        st.warning("‚ö†Ô∏è K-Means Cluster Model (kmeans_cluster_model.pkl) or Scaler (scaler_cluster.pkl) NOT FOUND. Clustering analysis will not be available.")


    try:
        rules_minor = joblib.load("apriori_rules_minor.pkl")
        rules_severe = joblib.load("apriori_rules_severe.pkl")
        rules_fatal = joblib.load("apriori_rules_fatal.pkl")
        st.success("‚úÖ Apriori Association Rules (apriori_rules_[minor/severe/fatal].pkl) Loaded.")
    except:
        rules_minor, rules_severe, rules_fatal = pd.DataFrame(), pd.DataFrame(), pd.DataFrame()
        st.warning("‚ö†Ô∏è Apriori Association Rules NOT FOUND. Risk association analysis will not be available.")


    return model, encoders, features, kmeans, scaler, rules_minor, rules_severe, rules_fatal

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î
model, encoders, features, kmeans, scaler, rules_minor, rules_severe, rules_fatal = load_all()

# ----------------------------------------------------------
# üß© Manual Mappings
# ----------------------------------------------------------
activity_mapping = {
    "0": "‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏ó‡πâ‡∏≤", "1": "‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞", "2": "‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•",
    "3": "‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•", "4": "‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", "5": "‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏µ‡∏¨‡∏≤", "6": "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"
}
aplace_mapping = {
    "10": "‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡∏±‡∏Å‡∏≠‡∏≤‡∏®‡∏±‡∏¢", "11": "‡∏ñ‡∏ô‡∏ô/‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏ß‡∏á", "12": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
    "13": "‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô/‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤", "14": "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞", "15": "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"
}
prov_mapping = {
    "10": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£", "20": "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", "30": "‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô",
    "40": "‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï", "50": "‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤", "60": "‡∏™‡∏á‡∏Ç‡∏•‡∏≤", "99": "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"
}
severity_map = {0: "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ô‡πâ‡∏≠‡∏¢", 1: "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", 2: "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏°‡∏≤‡∏Å"}
advice_map = {
    "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ô‡πâ‡∏≠‡∏¢": "‡∏î‡∏π‡πÅ‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏ã‡πâ‡∏≥‡∏ó‡∏∏‡∏Å 15‚Äì30 ‡∏ô‡∏≤‡∏ó‡∏µ",
    "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á": "‡∏™‡πà‡∏á‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏£‡∏ô‡πâ‡∏≥ / ‡∏¢‡∏≤‡πÅ‡∏Å‡πâ‡∏õ‡∏ß‡∏î / ‡πÄ‡∏ù‡πâ‡∏≤‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ä‡∏µ‡∏û‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î",
    "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏°‡∏≤‡∏Å": "‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏µ‡∏°‡∏™‡∏´‡∏™‡∏≤‡∏Ç‡∏≤ ‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏≤‡∏¢‡πÉ‡∏à ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏î‡πà‡∏ß‡∏ô"
}
triage_color = {
    "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ô‡πâ‡∏≠‡∏¢": "#4CAF50", "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á": "#FFC107", "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏°‡∏≤‡∏Å": "#F44336"
}

# ----------------------------------------------------------
# üß© Preprocess Function
# ----------------------------------------------------------
def preprocess_input(data_dict, encoders, features, activity_mapping, aplace_mapping, prov_mapping):
    df = pd.DataFrame([data_dict])
    reverse_activity = {v: k for k, v in activity_mapping.items()}
    reverse_aplace = {v: k for k, v in aplace_mapping.items()}
    reverse_prov = {v: k for k, v in prov_mapping.items()}

    # Mapping
    if df.at[0, "activity"] in reverse_activity:
        df.at[0, "activity"] = reverse_activity[df.at[0, "activity"]]
    if df.at[0, "aplace"] in reverse_aplace:
        df.at[0, "aplace"] = reverse_aplace[df.at[0, "aplace"]]
    if df.at[0, "prov"] in reverse_prov:
        df.at[0, "prov"] = reverse_prov[df.at[0, "prov"]]

    # Type Conversion
    for col in [
        "age", "sex", "is_night", "head_injury", "mass_casualty",
        "risk1", "risk2", "risk3", "risk4", "risk5",
        "cannabis", "amphetamine", "drugs"
    ]:
        df[col] = df[col].astype(float)

    # Encoding (Simplified if encoders are not available)
    for col in ["activity", "aplace", "prov"]:
        val = str(df.at[0, col])
        if encoders and col in encoders:
            le = encoders[col]
            if val in le.classes_:
                df[col] = le.transform([val])[0]
            else:
                df[col] = 0
        else:
            try:
                df[col] = int(val) # Use original string/int value if no encoder
            except ValueError:
                 df[col] = 0 # Handle cases where conversion to int fails


    # Feature Engineering
    if "age_group_60plus" not in df.columns:
        df["age_group_60plus"] = (df["age"] >= 60).astype(int)
    if "risk_count" not in df.columns:
        df["risk_count"] = df[["risk1","risk2","risk3","risk4","risk5"]].sum(axis=1)
    if "night_flag" not in df.columns:
        df["night_flag"] = df["is_night"].astype(int)

    # Reindex and Fill
    df = df.reindex(columns=features, fill_value=0)
    return df

# ----------------------------------------------------------
# üìÑ Streamlit App Layout
# ----------------------------------------------------------
st.set_page_config(layout="wide")

st.title("üè• Hospital AI Decision Support System")

# Initialize session state for form inputs if not already done
if 'age' not in st.session_state:
    st.session_state.age = 30
if 'sex' not in st.session_state:
    st.session_state.sex = "‡∏ä‡∏≤‡∏¢"
if 'is_night' not in st.session_state:
    st.session_state.is_night = False
if 'head_injury' not in st.session_state:
    st.session_state.head_injury = False
if 'mass_casualty' not in st.session_state:
    st.session_state.mass_casualty = False
if 'activity' not in st.session_state:
    st.session_state.activity = list(activity_mapping.values())[0]
if 'aplace' not in st.session_state:
    st.session_state.aplace = list(aplace_mapping.values())[0]
if 'prov' not in st.session_state:
    st.session_state.prov = list(prov_mapping.values())[0]
if 'risk1' not in st.session_state:
    st.session_state.risk1 = False
if 'risk2' not in st.session_state:
    st.session_state.risk2 = False
if 'risk3' not in st.session_state:
    st.session_state.risk3 = False
if 'risk4' not in st.session_state:
    st.session_state.risk4 = False
if 'risk5' not in st.session_state:
    st.session_state.risk5 = False
if 'cannabis' not in st.session_state:
    st.session_state.cannabis = False
if 'amphetamine' not in st.session_state:
    st.session_state.amphetamine = False
if 'drugs' not in st.session_state:
    st.session_state.drugs = False

# Function to reset form inputs
def reset_form():
    st.session_state.age = 30
    st.session_state.sex = "‡∏ä‡∏≤‡∏¢"
    st.session_state.is_night = False
    st.session_state.head_injury = False
    st.session_state.mass_casualty = False
    st.session_state.activity = list(activity_mapping.values())[0]
    st.session_state.aplace = list(aplace_mapping.values())[0]
    st.session_state.prov = list(prov_mapping.values())[0]
    st.session_state.risk1 = False
    st.session_state.risk2 = False
    st.session_state.risk3 = False
    st.session_state.risk4 = False
    st.session_state.risk5 = False
    st.session_state.cannabis = False
    st.session_state.amphetamine = False
    st.session_state.drugs = False


# ----------------------------------------------------------
# üß† TAB 1 ‚Äî CatBoost Prediction
# ----------------------------------------------------------
st.header("üß† Clinical Severity Prediction")

with st.form("prediction_form"):
    col1, col2, col3 = st.columns(3)
    with col1:
        age = st.slider("‡∏≠‡∏≤‡∏¢‡∏∏", 0, 100, key='age')
        sex = st.radio("‡πÄ‡∏û‡∏®", ["‡∏ä‡∏≤‡∏¢", "‡∏´‡∏ç‡∏¥‡∏á"], key='sex')
        is_night = st.checkbox("‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô", key='is_night')
    with col2:
        head_injury = st.checkbox("‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏®‡∏µ‡∏£‡∏©‡∏∞", key='head_injury')
        mass_casualty = st.checkbox("‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏´‡∏°‡∏π‡πà (Mass Casualty)", key='mass_casualty')
        activity = st.selectbox("‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", list(activity_mapping.values()), key='activity')
    with col3:
        aplace = st.selectbox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏", list(aplace_mapping.values()), key='aplace')
        prov = st.selectbox("‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", list(prov_mapping.values()), key='prov')
        risk_col1, risk_col2 = st.columns(2)
        with risk_col1:
            risk1 = st.checkbox("Risk 1: ‡πÑ‡∏°‡πà‡∏™‡∏ß‡∏°‡∏´‡∏°‡∏ß‡∏Å‡∏ô‡∏¥‡∏£‡∏†‡∏±‡∏¢ / ‡πÄ‡∏Ç‡πá‡∏°‡∏Ç‡∏±‡∏î‡∏ô‡∏¥‡∏£‡∏†‡∏±‡∏¢", key='risk1')
            risk2 = st.checkbox("Risk 2: ‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ‡πÄ‡∏£‡πá‡∏ß / ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ó", key='risk2')
            risk3 = st.checkbox("Risk 3: ‡πÄ‡∏°‡∏≤ / ‡∏î‡∏∑‡πà‡∏°‡∏™‡∏∏‡∏£‡∏≤", key='risk3')
        with risk_col2:
            risk4 = st.checkbox("Risk 4: ‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ / ‡πÄ‡∏î‡πá‡∏Å‡πÄ‡∏•‡πá‡∏Å", key='risk4')
            risk5 = st.checkbox("Risk 5: ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á", key='risk5')
            # Drugs (Assume separate inputs for simplicity in UI)
            cannabis = st.checkbox("‡∏û‡∏ö‡∏Å‡∏±‡∏ç‡∏ä‡∏≤", key='cannabis')
            amphetamine = st.checkbox("‡∏û‡∏ö‡πÅ‡∏≠‡∏°‡πÄ‡∏ü‡∏ï‡∏≤‡∏°‡∏µ‡∏ô", key='amphetamine')
            drugs = st.checkbox("‡∏û‡∏ö‡∏¢‡∏≤‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î‡∏≠‡∏∑‡πà‡∏ô ‡πÜ", key='drugs')

    col_buttons = st.columns(2)
    with col_buttons[0]:
        submit_button = st.form_submit_button("‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á")
    with col_buttons[1]:
        clear_button = st.form_submit_button("‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", on_click=reset_form)


if submit_button:
    # 1. ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Input Data
    input_data = {
        "age": st.session_state.age,
        "sex": 1 if st.session_state.sex == "‡∏ä‡∏≤‡∏¢" else 0, # Male=1, Female=0
        "is_night": int(st.session_state.is_night),
        "head_injury": int(st.session_state.head_injury),
        "mass_casualty": int(st.session_state.mass_casualty),
        "risk1": int(st.session_state.risk1), "risk2": int(st.session_state.risk2), "risk3": int(st.session_state.risk3),
        "risk4": int(st.session_state.risk4), "risk5": int(st.session_state.risk5),
        "cannabis": int(st.session_state.cannabis), "amphetamine": int(st.session_state.amphetamine), "drugs": int(st.session_state.drugs),
        "activity": st.session_state.activity, "aplace": st.session_state.aplace, "prov": st.session_state.prov
    }

    # 2. Preprocess
    X_input = preprocess_input(input_data, encoders, features, activity_mapping, aplace_mapping, prov_mapping)

    # 3. Predict
    current_label = "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö"
    if model is not None:
        try:
            probs = model.predict_proba(X_input)[0]
            pred_class = int(np.argmax(probs))
            current_label = severity_map.get(pred_class, "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö")
            color = triage_color.get(current_label, "#2196F3")

            # 4. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            st.subheader("üî• ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á")
            st.markdown(f"<h3 style='color:{color}'>{current_label}</h3>", unsafe_allow_html=True)
            st.info(f"üí° ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô: {advice_map.get(current_label, '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á')}")
            st.caption(f"üß† ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö: {probs[pred_class]*100:.1f}% (Probabilities: {probs})")

            # 5. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Prediction Log (For Dashboard)
            log_file = "prediction_log.csv"
            new_row = pd.DataFrame([{
                "timestamp": pd.Timestamp.now(),
                "age": st.session_state.age,
                "sex": st.session_state.sex,
                "predicted_severity": current_label
            }])
            if os.path.exists(log_file):
                new_row.to_csv(log_file, mode="a", index=False, header=False)
            else:
                new_row.to_csv(log_file, index=False)
            st.write("üìÅ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Log ‡πÅ‡∏•‡πâ‡∏ß")

        except Exception as e:
            st.error(f"‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {e}. (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏• CatBoost ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå)")

    else:
        st.warning("‚ö†Ô∏è ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏´‡∏•‡∏±‡∏Å (CatBoost) ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ")

    # ----------------------------------------------------------
    # üë• TAB 2 ‚Äî K-Means Cluster Analysis
    # ----------------------------------------------------------
    st.header("üë• Patient Segmentation")

    if kmeans is not None and scaler is not None and model is not None:
        st.write(f"üßæ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ‡∏≠‡∏≤‡∏¢‡∏∏ {st.session_state.age} ‡∏õ‡∏µ, ‡πÄ‡∏û‡∏® {st.session_state.sex}, ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: {current_label}")

        # 1. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Clustering
        if hasattr(scaler, "feature_names_in_"):
            valid_cols = scaler.feature_names_in_
            # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ features ‡∏ó‡∏µ‡πà scaler ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            X_cluster = X_input[[c for c in valid_cols if c in X_input.columns]]
        else:
            # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ feature names ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
             X_cluster = X_input.select_dtypes(include=[np.number])


        if not X_cluster.empty:
            # 2. Scaling ‡πÅ‡∏•‡∏∞ Predict Cluster
            try:
                X_scaled = scaler.transform(X_cluster)
                cluster_label = int(kmeans.predict(X_scaled)[0])

                # 3. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
                cluster_desc = {
                    0: "üëµ ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ / ‡∏•‡∏∑‡πà‡∏ô‡∏•‡πâ‡∏°‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô ‚Üí ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥",
                    1: "üöó ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏¢‡∏ó‡∏≥‡∏á‡∏≤‡∏ô / ‡πÄ‡∏°‡∏≤ / ‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ‡πÄ‡∏£‡πá‡∏ß ‚Üí ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á",
                    2: "‚öΩ ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏î‡πá‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏¢‡∏£‡∏∏‡πà‡∏ô / ‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏µ‡∏¨‡∏≤ ‚Üí ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á",
                    3: "üë∑ ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô / ‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á ‚Üí ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á",
                    4: "üôÇ ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ / ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏î‡πà‡∏ô ‚Üí ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥"
                }

                st.subheader(f"üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö: Cluster {cluster_label}")
                st.info(f"üí° ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏•‡∏∏‡πà‡∏°: {cluster_desc.get(cluster_label, '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ')}")
            except Exception as e:
                st.error(f"‚ùå Error in Clustering: {e}")
        else:
            st.warning("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Clustering ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    else:
        st.warning("‚ö†Ô∏è ‡πÇ‡∏°‡πÄ‡∏î‡∏• K-Means / Scaler ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")


    # ----------------------------------------------------------
    # üß© TAB 3 ‚Äî Apriori Risk Association
    # ----------------------------------------------------------
    st.header("üß© Risk Association Analysis")

    # 1. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á frozenset ‚Üí ‡∏Ñ‡∏≥‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    def decode_set(x):
        if isinstance(x, (frozenset, set)):
            replacements = {
                "risk1": "‡πÑ‡∏°‡πà‡∏™‡∏ß‡∏°‡∏´‡∏°‡∏ß‡∏Å‡∏ô‡∏¥‡∏£‡∏†‡∏±‡∏¢/‡πÄ‡∏Ç‡πá‡∏°‡∏Ç‡∏±‡∏î‡∏ô‡∏¥‡∏£‡∏†‡∏±‡∏¢", "risk2": "‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ‡πÄ‡∏£‡πá‡∏ß/‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ó", "risk3": "‡πÄ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏Ç‡∏±‡∏ö",
                "risk4": "‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏/‡πÄ‡∏î‡πá‡∏Å‡πÄ‡∏•‡πá‡∏Å", "risk5": "‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á", "head_injury": "‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏®‡∏µ‡∏£‡∏©‡∏∞",
                "mass_casualty": "‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏´‡∏°‡∏π‡πà", "cannabis": "‡∏û‡∏ö‡∏Å‡∏±‡∏ç‡∏ä‡∏≤‡πÉ‡∏ô‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢", "amphetamine": "‡∏û‡∏ö‡πÅ‡∏≠‡∏°‡πÄ‡∏ü‡∏ï‡∏≤‡∏°‡∏µ‡∏ô‡πÉ‡∏ô‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢",
                "drugs": "‡∏û‡∏ö‡∏¢‡∏≤‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÉ‡∏ô‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢", "sex": "‡πÄ‡∏û‡∏®‡∏ä‡∏≤‡∏¢", "age60plus": "‡∏≠‡∏≤‡∏¢‡∏∏‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 60 ‡∏õ‡∏µ"
            }
            readable = [replacements.get(str(i), str(i)) for i in list(x)]
            return ", ".join(readable)
        return str(x)

    # 2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∏‡∏î‡∏Å‡∏é‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    df_rules = pd.DataFrame()

    if current_label == "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ô‡πâ‡∏≠‡∏¢":
        df_rules = rules_minor.copy()
    elif current_label == "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á":
        df_rules = rules_severe.copy()
    elif current_label == "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏°‡∏≤‡∏Å":
        df_rules = rules_fatal.copy()

    if not df_rules.empty:
        df_rules = df_rules.head(5) # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
        df_rules["antecedents"] = df_rules["antecedents"].apply(decode_set)
        df_rules["consequents"] = df_rules["consequents"].apply(decode_set)

        # 3. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Insight ‡∏´‡∏•‡∏±‡∏Å
        if not df_rules.empty:
            top_rule = df_rules.iloc[0]
            st.subheader("üí° Insight (‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢)")
            st.write(f"‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ **{top_rule['antecedents']}** ‡∏°‡∏±‡∏Å‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° **{top_rule['consequents']}**")
            st.caption(f"(Confidence: {top_rule['confidence']*100:.1f}%, Lift: {top_rule['lift']:.2f})")

        # 4. ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏é
        st.subheader("üìö ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏é Risk Association Top 5:")
        st.dataframe(df_rules[["antecedents", "consequents", "support", "confidence", "lift"]])
    else:
        st.info(f"üì≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏é Apriori ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö '{current_label}'")


    # ----------------------------------------------------------
    # üìä TAB 4 ‚Äî Clinical Summary & Insights Dashboard
    # ----------------------------------------------------------
    st.header("üìä Clinical Summary & Insights Dashboard")

    log_file = "prediction_log.csv"

    # 1. ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Log
    if os.path.exists(log_file):
        df_log = pd.read_csv(log_file)
        st.write(f"üìÅ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(df_log):,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n")
    else:
        st.warning("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (prediction_log.csv) ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô")
        df_log = pd.DataFrame(columns=["timestamp", "age", "sex", "predicted_severity"])

    total_cases = len(df_log)

    if total_cases > 0:
        # 2. KPI Overview
        st.subheader("üí° ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå (KPI Overview)")
        severe_ratio = df_log["predicted_severity"].eq("‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏°‡∏≤‡∏Å").mean() * 100
        male_ratio = (df_log["sex"] == "‡∏ä‡∏≤‡∏¢").mean() * 100
        female_ratio = (df_log["sex"] == "‡∏´‡∏ç‡∏¥‡∏á").mean() * 100

        col_kpi1, col_kpi2, col_kpi3 = st.columns(3)
        col_kpi1.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"{total_cases:,}")
        col_kpi2.metric("‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á", f"{severe_ratio:.1f}%")
        col_kpi3.metric("‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô ‡πÄ‡∏û‡∏®‡∏ä‡∏≤‡∏¢ : ‡∏´‡∏ç‡∏¥‡∏á", f"{male_ratio:.1f}% : {female_ratio:.1f}%")


        # 3. Distribution by Severity (Pie Chart)
        st.subheader("ü©∏ ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á (Pie Chart)")

        # Use matplotlib/seaborn to create the plot
        fig, ax = plt.subplots()
        # Need to ensure all 3 severity levels are present for consistent colors
        severity_counts = df_log['predicted_severity'].value_counts().reindex(severity_map.values(), fill_value=0)

        ax.pie(
            severity_counts,
            labels=severity_counts.index,
            autopct='%1.1f%%',
            startangle=90,
            colors=[triage_color.get(l) for l in severity_counts.index],
            textprops={'color': 'black', 'fontsize': 10}
        )
        ax.set_title("Level")
        st.pyplot(fig)


        # 4. Insight Summary
        st.subheader("ü©∫ Insight ‡∏ó‡∏≤‡∏á‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å & ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå")
        top_severity = df_log["predicted_severity"].value_counts().idxmax()

        if top_severity == "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏°‡∏≤‡∏Å":
            msg = "‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏™‡∏π‡∏á ‡∏Ñ‡∏ß‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡∏ó‡∏µ‡∏°‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÄ‡∏Ñ‡∏™‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"
        elif top_severity == "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á":
            msg = "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ã‡πâ‡∏≥"
        else:
            msg = "‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"

        st.write(f"üìä **‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:** {msg}")
        st.write("üí° ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•")

    else:
        st.info("üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á Dashboard")
